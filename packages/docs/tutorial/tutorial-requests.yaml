# Copyright 2020-2022 Lowdefy, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

_ref:
  path: templates/general.yaml.njk
  vars:
    pageId: tutorial-requests
    pageTitle: 5. Requests
    section: Tutorial
    filePath: tutorial/tutorial-requests.yaml
    content:
      - id: body_axios
        type: MarkdownWithCode
        properties:
          content: |
            If you have been following along, you can continue with your current config. Else, you can find the config from the previous section [here](https://github.com/lowdefy/lowdefy-example-tutorial/tree/main/04-interactive-pages).

            We will now add an [`AxiosHttp`](/AxiosHttp) connection and an [`SQLite`](/SQLite) connection to our app.
            The [`AxiosHttp`](/AxiosHttp) connection will be used to get the list of products that tickets can be logged for.
            The [`SQLite`](/SQLite) connection will be used to store the tickets created by the user.

            ## Configuring the AxiosHttp Connection and Request

            We want to add a [`Selector`](/selector) block to our form that will allow the user to select which product they are logging a ticket about, from a preset list of options. This list of preset product options will be obtained from the [DummyJSON](https://dummyjson.com/) API.
            For this, we will make use of an [`AxiosHttp`](/AxiosHttp) connection.

            In order to do this, we must follow the following steps:

            #### Step 5.1.1

            In your `lowdefy.yaml` file, add the following:

            ##### `lowdefy.yaml`

            ```yaml
            name: lowdefy-project-template
            version: CURRENT_LOWDEFY_VERSION

            ################ -------- Copy from here -------- ################
            connections:
              - id: dummy_api
                type: AxiosHttp
                properties:
                  baseURL: https://dummyjson.com/
            ################ ------- Copy to here ----------- ################

            menus:
              # ...
            ```

            #### Step 5.1.2

            In your `new-ticket.yaml` file, add the following request:

            ##### `pages/new-ticket.yaml`

            ```yaml
            id: new-ticket
            type: PageHeaderMenu
            ################ -------- Copy from here -------- ################
            requests:
              - id: get_products
                type: AxiosHttp
                connectionId: dummy_api
                properties:
                  url: /products
            ################ ------- Copy to here ----------- ################

            properties:
              title: New ticket # The title in the browser tab.
            layout:
              contentJustify: center # Center the contents of the page
            blocks:
              # ...
            ```

            #### Step 5.1.3

            In your `new-ticket.yaml` file, add an onMount event that calls `get_products` request:

            ##### `pages/new-ticket.yaml`

            ```yaml
            requests:
              - id: get_products
                type: AxiosHttp
                connectionId: dummy_api
                properties:
                  url: /products

            ################ -------- Copy from here -------- ################
            events:
              onMount:
                - id: fetch_products
                  type: Request
                  params: get_products
            ################ ------- Copy to here ----------- ################

            properties:
              title: New ticket # The title in the browser tab.
            layout:
              contentJustify: center # Center the contents of the page
            blocks:
              # ...
            ```

            #### Step 5.1.3

            In your `new-ticket.yaml` file, add the a Selector block and populate it with the results from the `get_products` request. We will make use of `_array.map` to get the product titles from the response obtained from the request. This is done as follows:

            ##### `pages/new-ticket.yaml`

            ```yaml
            id: new-ticket
                # ...
            blocks:
              - id: content_card
                # ...
                blocks:
                  - id: page_heading
                    type: Title
                    properties:
                      content: Log a ticket # Change the title on the page.
                      level: 3 # Make the title a little smaller (an html `<h3>`).
                  - id: ticket_title
                    type: TextInput
                    properties:
                      title: Title
                  - id: ticket_type
                    type: ButtonSelector
                    properties:
                      title: Ticket type
                      options: # Set the allowed options
                        - Suggestion
                        - Complaint
                        - Question

            ################ ------- Copy from here -------- ################
                  - id: product
                    type: Selector
                    required: true
                    properties:
                      title: Product
                      options: # Set the allowed options QUERY FROM API
                        _array.map:
                          - _request: get_products.data.products
                          - _function:
                              __args: 0.title
            ################ ------- Copy to here -------- ################

                  - id: ticket_description
                    type: TextArea
                    properties:
                      title: Description
            ```

            ### What happened

            We defined the `AxiosHttp` connection to be used to obtain the list of products that tickets can be created for.

            We also defined an `AxiosHttp` request, to fetch the products data when the page is mounted. To do this, we used the onMount event to execute the Request action to make the API call.

            We then used the request response in the product selector by using the [_request](/_request) and [_array.map](/_array#map_title) operators.

      - id: body_sqlite
        type: MarkdownWithCode
        properties:
          content: |
            ## Configuring the SQLite Connection and Request

            We will be saving the data from our form in a SQLite database, using the [`SQLite`](/SQLite) connection. To do this, we will first need to set up an SQLite database.

            In order to do this, we must follow the following steps:

            #### Step 5.2.1

            We will make use of an SQLite database with a table called `tickets`, that has the following columns:

            - ticket_title
            - ticket_type
            - ticket_description
            - product
            - purchase_in_last_month
            - created_date

      - id: table_download
        type: Html
        properties:
          html: |
            The database used in this tutorial can be downloaded <a href="/tutorial/tutorial_db.sqlite" download>here</a>.

      - id: body_sqlite_steps
        type: MarkdownWithCode
        properties:
          content: |
            Alternatively, install [SQLite](https://www.sqlite.org/) on your computer and use the following to create the needed table:

            ```
            CREATE TABLE tickets (
              ticket_title varchar(100),
              ticket_type varchar(50),
              ticket_description varchar(200),
              product varchar(100),
              purchase_in_last_month real,
              created_date real
            );
            ```

            #### Step 5.2.2

            Create a file called `.env` in your project directory with the following:

            ##### `.env`
            ```
            LOWDEFY_SECRET_FILENAME= __ABSOLUTE_PATH_TO_SQLITE_DB_FILE__
            ```

            #### Step 5.2.3

            In your `lowdefy.yaml` file, add the following:

            ##### `lowdefy.yaml`

            ```yaml
            name: lowdefy-project-template
            version: CURRENT_LOWDEFY_VERSION

            connections:
              # ...
            ################ -------- Copy from here -------- ################
                - id: knex
                  type: Knex
                  properties:
                    client: sqlite
                    connection:
                      filename:
                        _secret: SQLITE_FILENAME
            ################ ------- Copy to here ----------- ################

            menus:
              # ...
            ```

            #### Step 5.2.4

            In your `new-ticket.yaml` file, add the following request:

            ##### `pages/new-ticket.yaml`

            ```yaml
            id: new-ticket
            type: PageHeaderMenu
            requests:
              # ...
            ################ -------- Copy from here -------- ################
              - id: save_new_ticket
                type: KnexRaw
                connectionId: knex
                payload:
                  _state: true
                properties:
                  query: |
                    INSERT INTO tickets (
                    ticket_title,
                    ticket_type,
                    ticket_description,
                    product,
                    purchase_in_last_month,
                    created_date)
                    VALUES(
                    :ticket_title,
                    :ticket_type,
                    :ticket_description,
                    :product,
                    :purchase_in_last_month,
                    :created_date)
                  parameters:
                    ticket_title:
                      _payload: ticket_title
                    ticket_type:
                      _payload: ticket_type
                    ticket_description:
                      _payload: ticket_description
                    product:
                      _payload: product
                    purchase_in_last_month:
                      _payload: purchase_in_last_month
                    created_date:
                      _date: now
            ################ ------- Copy to here ----------- ################

            properties:
              title: New ticket # The title in the browser tab.
            layout:
              contentJustify: center # Center the contents of the page
            blocks:
              # ...
            ```

            #### Step 5.2.5

            In your `new-ticket.yaml` file, add the following action to the submit button:

            ##### `pages/new-ticket.yaml`

            ```yaml
            id: new-ticket
            # ...
            blocks:
              - id: content_card
                # ...
                blocks:
                  - id: page_heading
                    # ...
                    # ...
                    # ...
                  - id: submit_button
                    type: Button
                    #...
                    events:
                      onClick:
                        - id: validate
                          type: Validate
                        ################ -------- Copy from here -------- ################
                        - id: save_data # Make a request to the SQLite database
                          type: Request
                          params: save_data
                        - id: reset # Reset the form once data has been submitted
                          type: Reset
                        ################ ------- Copy to here ----------- ################
            ```

            #### Step 5.2.6

            If you click the submit button, your form data should be added into the tickets table.

            ### What happened
            We set up the table and column names we will be using in our SQLite database. We need to do this to use the `SQLite` connection.

            We defined the `Knex` connection, with the SQLite client.

            We also defined a `KnexRaw` request, to save the data to our SQLite database, and called that request when clicking the submit button. This was done by making use of the onCLick event on the button to execute the Request action to make the API call.

            > You can find the final configuration files for this section [here](https://github.com/lowdefy/lowdefy-example-tutorial/tree/main/05-requests).

            ### Up next

            Up next we will be deploying our app using Netlify. Then it will be live, on the internet, for anyone to see 🚀.

      - _ref:
          path: templates/navigation_buttons.yaml
          vars:
            previous_page_title: Interactive pages
            previous_page_id: tutorial-actions-operators
            next_page_title: Additional Page
            next_page_id: tutorial-additional-page
