# Copyright 2020-2022 Lowdefy, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

_ref:
  path: templates/general.yaml.njk
  vars:
    pageId: page-and-app-state
    pageTitle: Page and App State
    section: Concepts
    filePath: concepts/page-and-app-state.yaml
    content:
      - id: md1
        type: MarkdownWithCode
        properties:
          content:
            _nunjucks:
              on:
                version:
                  _ref: version.yaml
              template: |
                A Lowdefy app has a few different data objects which can be accessed and modified. The app wide objects are the `global`, the `media` and the `user` objects. Then there are page specific objects like the `state`, the `urlQuery` and the `input` objects. A user can use [`connections and requests`](/connections-and-requests) to connect to external data sources.

                ## State

                Every [`input` category block](/blocks) inside the page will have a value in the `state` object, with their `id` as the key in the `state` object, unless the block is not visible, in which case the input value is removed from the state object.

                A `state` object is unique to a page and every `input` block maintains a value in it's parent `state` object. The [`_state`](/_state) operator can be used to read from `state` and the [`SetState`](/SetState) action can be used to modify the value of a `state` object in the same page from which `SetState` is called.

                > See [`operators`](/operators) and [`events-and-actions`](/events-and-actions) for more details.

                Page states remain even as users navigate to new pages - so if a user returns to a page, the state as they left it will remain.

                ### Reading from state
                Here is an example showing how to read `input` block values from `state`:
                ```yaml
                id: my-page
                type: PageHeaderMenu
                blocks:
                  - id: Name
                    type: TextInput
                  - id: Age
                    type: NumberInput
                  - id: MyDisplay
                    type: Html
                    properties:
                      html:
                        _string.concat:
                          - <b>Name:</b>
                          - _state: Name
                          - <br/><b>Age:</b>
                          - _state: Age
                ```

                ### Modifying state
                The following examples demonstrates how to modify `state`:
                ```yaml
                id: my-page
                type: PageHeaderMenu
                blocks:
                  - id: Name
                    type: TextInput
                  - id: Age
                    type: NumberInput
                  - id: Button
                    type: Button
                    events:
                      onClick:
                        - id: set_person_object
                          type: SetState
                          params:
                            person:
                              name:
                                _state: Name
                              age:
                                _state: Age
                              example: true
                ```

                This will result in a `state` which looks like:
                ```json5
                {
                  "Name": "Alice", // The TextInput value
                  "Age": 99, //The NumberInput value
                  "person": {
                    "name": "Alice",
                    "age": 99,
                    "example": true
                  }
                }
                ```

                ## Global
                The `global` object is a single app level data object defined in the Lowdefy [config root](/lowdefy-schema). This object is the same for every page. The `global` object can be modified using the [`SetGlobal`](/SetGlobal) action.

                > Note that when `SetGlobal` is called, `global` will not be consistent between clients, like different users, or a single user with multiple tabs open.

                ### Reading from global
                This example shows how you can create and read from `global`:

                `lowdefy.yaml`
                ```yaml
                lowdefy: {{ version }}
                global:
                  key: value
                pages:
                  - id: my-page
                    type: PageSiderMenu
                    blocks:
                      id: DisplayGlobalKey
                      type: Html
                      html:
                        _global: key ## Returns 'value'
                ```

                ### Modifying global
                The following examples shows how to modify the `global` object:

                `lowdefy.yaml`
                ```yaml
                lowdefy: {{ version }}
                global:
                  key: value
                pages:
                  - id: my-page
                    type: PageSiderMenu
                    blocks:
                      - id: DisplayGlobalKey
                        type: Html
                        html:
                          _global: key ## Returns `value`
                      - id: ModifyGlobal
                        type: Button
                        events:
                          onClick:
                            - id: modify_global_key
                              type: SetGlobal
                              params:
                                key: New Value
                      - id: DisplayModifiedGlobalKey
                        type: Html
                        html:
                          _global: key ## Returns `New Value`
                ```
                ## Url query
                The `urlQuery` object is used to access variables set in the url. Url query parameters can be set using the `urlQuery` field in the [`Link`](/Link) action and read using the [`_url_query`](/_url_query) operator. It can be useful to create sharable links containing some additional information other than the page route. For example setting a document id in the url so that the document can be retrieved when the link is opened during the page [`onMount`](/events-and-actions) event.

                > Note that any variables set to `urlQuery` will be publicly visible.

                ### Example using `urlQuery` and `Link`

                `first-page.yaml`
                ```yaml
                id: first-page
                type: PageSiderMenu
                blocks:
                  - id: LinkButton
                    type: Button
                    events:
                      - id: link_to_second_page
                        type: Link
                        params:
                          pageId: second-page
                          urlQuery:
                            document-id: ABC123
                ```

                `second-page.yaml`
                ```yaml
                id: second-page
                type: PageSiderMenu
                events:
                  onMount:
                    - id: set_url_id
                      type: SetState
                      params:
                        myDocId:
                          _url_query: document-id ## Returns 'ABC123'
                ```

                ## Input

                The `input` object is unique to a page, and works similar to the `urlQuery` object. The `input` object is used to pass information between page transitions. Variables set to the `input` object are not written to the url, so they are not visible publicly but also cannot be used to share the data in a link since a `input` object is only consistent between one page and the next to which it links. A `input` object is set to the `input` field of the [`Link`](/Link) action when linking from one page to the next and can be read using the [`_input`](/_input) operator.

                > Note `input` cannot be passed between pages when using the `newTab: true` parameter in the [`Link`](/Link) action.

                ### Example of setting and reading `input`

                `first-page.yaml`
                ```yaml
                id: first-page
                type: PageSiderMenu
                blocks:
                  - id: LinkButton
                    type: Button
                    events:
                      - id: link_to_second_page
                        type: Link
                        params:
                          pageId: second-page
                          input:
                            document-id: SUPERSECRET456
                ```

                `second-page.yaml`
                ```yaml
                id: second-page
                type: PageSiderMenu
                events:
                  onMount:
                    - id: set_input_id
                      type: SetState
                      params:
                        myDocId:
                          _input: document-id ## Returns 'SUPERSECRET456'
                ```
                ## Media

                The `media` object contains some information about the client screen size, for example, and can be accessed using the [`_media`](/_media) operator. This can be used to add additional responsive logic to a page.

                Here is an example showing how to read the screen size of a smartphone:
                ```yaml
                id: DisplayScreenSize
                type: Html
                properties:
                  html:
                    _media: size ## Returns xs if used on phone width screen width < 576px
                ```

                ## User

                #TODO: Sam should please fix this paragraph when updating the auth docs
                The `user` object contains the data in the user idToken if OpenID Connect authentication is configured and a user is logged in. The `user` data can be accessed using the [`_user`](/_user) operator.

                This example shows how to read a logged-in user's username and id:
                ```yaml
                id: my-page
                type: PageSiderMenu
                blocks:
                  - id: DisplayUserName
                    type: Html
                    properties:
                      html:
                        _string.concat:
                          - <b>Name: </b>
                          - _user: name
                  - id: DisplayUserId
                    type: Html
                    properties:
                      html:
                        _string.concat:
                          - <b>ID: </b>
                          - _user: id
                ```

                #### TLDR
                  - There are app wide and page specific data objects.
                  - App wide are `global`, `media` and `user`.
                  - Page specific are `state`, `urlQuery` and `input`.
                  - All input blocks write their value to `state`, with the their `id` as the key in the `state` object.
                  - Input blocks which are not visible are removed from `state`.
                  - The `SetState` action can also modify the `state` object.

      - _ref:
          path: templates/navigation_buttons.yaml
          vars:
            previous_page_title: Lowdefy Schema
            previous_page_id: lowdefy-schema
            next_page_title: Blocks
            next_page_id: blocks
