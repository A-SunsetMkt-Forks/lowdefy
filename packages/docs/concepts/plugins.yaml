_ref:
  path: templates/general.yaml.njk
  vars:
    pageId: plugins
    pageTitle: Plugins
    section: Concepts
    filePath: concepts/plugins.yaml
    content:
      - id: md1
        type: MarkdownWithCode
        properties:
          content: |
            Lowdefy has a plugin system that can be used to create custom blocks, connections, requests, action, operators and auth providers, adapters, callbacks and events. These plugins are written as standard npm modules, so community plugins can be published to npm, and the workspace and git protocols can be used for project specific or private plugins. Since plugins are npm packages most Javascript features and third-party npm packages can be used in plugins.

            ## Using a plugin

            To use a plugin in an app, the plugin name and version should be specified in the `plugins` section of the Lowdefy config. Once the plugin is included, the types (blocks, connections, etc) defined in the plugin can be used anywhere in the app.

            If two plugins export types with the same type name, user defined plugins will override the default Lowdefy types, and user defined plugins will overwrite other plugins defined before them in the plugins array.

            ###### Example

            ```yaml
            plugins:
              # plugins installed remotely from npm
              - name: npm-plugin
                version: 1.0.0
                # local plugins in pnpm monorepo
              - name: local-plugin
                version: workspace:*
            ```

            ## Developing Plugins

            ### Package Structure

            To develop plugins and publish plugins to npm or to use unpublished, project-specific plugins, we recommend using a pnpm monorepo with the plugin packages and a Lowdefy app, as demonstrated in [this example](https://github.com/lowdefy/lowdefy-example-plugins). The [Lowdefy default plugin packages](https://github.com/lowdefy/lowdefy/tree/main/packages/plugins) can also be used as examples.

            A plugin package needs to include the following:

            - A `package.json` which declares the package and exports the plugin types.
            - A `types.js` file which exports the plugin type names.
            - A file that exports all the types as named exports.
            - The code for the types exposed by the plugin package.

            #### package.json

            The `package.json` file

            ```json
            {
              "name": "plugin-name",
              "version": "1.0.0",
              "type": "module",
              "exports": {
                "./auth/callbacks": "./src/auth/callbacks.js",
                "./auth/events": "./src/auth/events.js",
                "./auth/providers": "./src/auth/providers.js",
                "./blocks": "./src/blocks.js",
                "./connections": "./src/connections.js",
                "./operators/build": "./src/operators/build.js",
                "./operators/client": "./src/operators/client.js",
                "./operators/server": "./src/operators/server.js",
                "./types": "./src/types.js"
              },
              "files": ["src/*"],
              "dependencies": {}
            }
            ```

            You can change your folder structure in your package, but then you need to change the [`exports`](https://nodejs.org/api/packages.html#package-entry-points) config in the `package.json` file to match your file structure.

            ##### Compiling React for blocks

            To develop a block plugin, the React code needs to compiled before it can be used in the Lowdefy app. The [Lowdefy plugin example](https://github.com/lowdefy/lowdefy-example-plugins) has an example of this configured using SWC

            #### types.js

            The `types.js` file declares the different types provided by the plugin package. This is used by Lowdefy build to map plugin types used in the Lowdefy config to plugin packages.

            The file should export an object that contains the type names (the names used in the Lowdefy config) for all the different types provided by the package.

            ###### Example with all types

            ```js
            export default {
              actions: ['Action'],
              auth: {
                callbacks: ['Callback'],
                events: ['Event'],
                provider: ['Provider'],
              },
              blocks: ['Block'],
              connections: ['Connection'],
              requests: ['Request'],
              operators: {
                build: ['_build_operator', '_shared_operator'],
                client: ['_client_operator', '_shared_operator'],
                server: ['_server_operator', '_shared_operator'],
              },
            };
            ```

            The type names do not need to be hard coded, and can be generated by importing the plugin types. This might cause some issues with third-party libraries that do not support ES Modules.

            ###### Example connections

            ```js
            import * as connections from './connections.js';

            export default {
              connections: Object.keys(connections),
              requests: Object.keys(connections)
                .map((connection) => Object.keys(connections[connection].requests))
                .flat(),
            };
            ```

            When developing blocks, the names of any react-icons used by the block, as well the path to any CSS or LESS files used by the block also need to be included in the types object, as discussed below.

            ###### Example blocks

            ```js
            import * as blocks from './blocks.js';

            const icons = {};
            const styles = {};
            Object.keys(blocks).forEach((block) => {
              icons[block] = blocks[block].meta.icons || [];
              styles[block] = blocks[block].meta.styles || [];
            });

            export default {
              blocks: Object.keys(blocks),
              icons,
              styles: { default: [], ...styles },
            };
            ```

            ### Blocks

            ### Connections and Requests

            ### Actions

            ### Operators
      - _ref:
          path: templates/navigation_buttons.yaml
          vars:
            previous_page_title: Hosting Files
            previous_page_id: hosting-files
            next_page_title: Custom Styling
            next_page_id: custom-styling
