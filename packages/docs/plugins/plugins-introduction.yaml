_ref:
  path: templates/general.yaml.njk
  vars:
    pageId: plugins-introduction
    pageTitle: Plugins
    section: Concepts
    filePath: concepts/plugins-introduction.yaml
    content:
      - id: md1
        type: MarkdownWithCode
        properties:
          content: |
            Lowdefy has a plugin system that can be used to create custom blocks, connections, requests, action, operators and auth providers, adapters, callbacks and events. These plugins are written as standard npm modules, so community plugins can be published to npm, and the workspace and git protocols can be used for project specific or private plugins. Since plugins are npm packages most Javascript features and third-party npm packages can be used in plugins.

            ## Using a plugin

            To use a plugin in an app, the plugin name and version should be specified in the `plugins` section of the Lowdefy config. Once the plugin is included, the types (blocks, connections, etc) defined in the plugin can be used anywhere in the app.

            If two plugins export types with the same type name, user defined plugins will override the default Lowdefy types, and user defined plugins will overwrite other plugins defined before them in the plugins array.

            ###### Example

            ```yaml
            plugins:
              # plugins installed remotely from npm
              - name: npm-plugin
                version: 1.0.0
                # local plugins in pnpm monorepo
              - name: local-plugin
                version: workspace:*
            ```
