_ref:
  path: templates/general.yaml.njk
  vars:
    pageId: plugins-actions
    pageTitle: Action Plugins
    section: Plugins
    filePath: plugins/plugins-actions.yaml
    content:
      - id: md1
        type: MarkdownWithCode
        properties:
          content: |
            Actions are functions that are triggered by events in a Lowdefy app. Actions can be `async` functions. The response returned by the action can be read using the `_actions` operator. If a promise is returned, the promise will be awaited before the next action is run.

            The Lowdefy engine provides a context object to the action with the following parameters:

            - `globals: object`: Commonly used Javascript global objects. These are passed to the action for easier testing.
              - `document: object`: The browser [`window.document`](https://developer.mozilla.org/en-US/docs/Web/API/Document/Document) global variable.
              - `fetch: function`: The global [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/fetch) Javascript method.
              - `window: object`: The browser [`window`](https://developer.mozilla.org/en-US/docs/Web/API/Window) global variable.
            - `methods: object`:
              - `callMethod: function`: Call the CallMethod action.
              - `displayMessage: function`: Call the DisplayMessage action.
              - `getActions: function`: Get data from previous actions in the action chain.
              - `getBlockId: function`: Get the blockId of the block that triggered the event.
              - `getEvent: function`: Get event data from the event that triggered the action.
              - `getGlobal: function`: Get data from the Lowdefy global object.
              - `getInput: function`: Get data from the Lowdefy input object.
              - `getPageId: function`: Get the pageId of the block that the action is defined on.
              - `getRequestDetails: function`: Get data from Lowdefy requests.
              - `getState: function`: Get data from the Lowdefy state object.
              - `getUrlQuery: function`: Get data from the Lowdefy urlQuery object.
              - `getUser: function`: Get data from the Lowdefy user object.
              - `link: function`: Call the Link action.
              - `login: function`: Call the Login action.
              - `logout: function`: Call the Logout action.
              - `request: function`: Call the Request action.
              - `reset: function`: Call the Reset action.
              - `resetValidation: function`: Call the ResetValidation action.
              - `setGlobal: function`: Call the SetGlobal action.
              - `setState: function`: Call the SetGlobal action.
              - `validate: function`: Call the Validate action.
            - `params: any`: The `params` defined by the user in the Lowdefy configuration. Operators are evaluated before the params are passed to the action. No validation is performed on this object.

            #### Examples

            ###### The Lowdefy SetState action:
            ```js
            function SetState({ methods: { setState }, params }) {
              setState(params);
            }

            export default SetState;
            ```

            ###### The Lowdefy Fetch action:
            ```js
            async function Fetch({ globals, params }) {
              const { fetch } = globals;
              const { url, options, responseFunction } = params;
              const res = await fetch(url, options);
              if (responseFunction) {
                return res[responseFunction]();
              }
              return res;
            }

            export default Fetch;
            ```

            ###### An action that shows the user confetti using the js-confetti package:
            ```js
            import JSConfetti from 'js-confetti';

            async function Confetti({ params }) {
              const jsConfetti = new JSConfetti();
              const { emojis, confettiRadius = 3, confettiNumber = 50, emojiSize = 10 } = params;
              jsConfetti.addConfetti({
                emojis,
                confettiRadius,
                confettiNumber,
                emojiSize,
              });
            }

            export default Confetti;
            ```
      - _ref:
          path: templates/navigation_buttons.yaml
          vars:
            previous_page_title: Developing Plugins
            previous_page_id: plugins-dev
            next_page_title: Operators
            next_page_id: plugins-operators
